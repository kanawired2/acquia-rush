{
	"version": 3,
	"file": "mixins.css",
	"sources": [
		"../../scss/utils/mixins.scss"
	],
	"sourcesContent": [
		"///\n/// String replace\n///\n@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);\n  }\n\n  @return $string;\n}\n\n///\n/// Font face mixins\n///\n@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {\n  $src: null;\n  $extmods: (\n    eot: \"?\",\n    svg: \"#\" + str-replace($name, \" \", \"_\")\n  );\n  $formats: (\n    otf: \"opentype\",\n    ttf: \"truetype\"\n  );\n\n  @each $ext in $exts {\n    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);\n    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);\n    $src: append($src, url(quote($path + \".\" + $extmod)) format(quote($format)), comma);\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: $style;\n    font-weight: $weight;\n    src: $src;\n  }\n}\n\n///\n/// Font size mixins\n///\n@mixin font-size($sizeValue: 1.6) {\n  font-size: ($sizeValue * 10) + px;\n  font-size: $sizeValue + rem;\n}\n\n///\n/// @extend %clearfix;\n///\n%clearfix {\n  clear: both;\n\n  &:before,\n  &:after {\n    content: \"\";\n    display: table;\n  }\n\n  &:after {\n    clear: both;\n  }\n}\n\n/// Adds a browser prefix to the property\n/// @param {*} $property Property\n/// @param {*} $value Value\n@mixin css3-prefix($property, $value) {\n  -webkit-#{$property}: #{$value};\n  -khtml-#{$property}: #{$value};\n  -moz-#{$property}: #{$value};\n  -ms-#{$property}: #{$value};\n  -o-#{$property}: #{$value};\n  #{$property}: #{$value};\n}\n\n/// Background Gradient\n/// @param {Color} $startColor [#3C3C3C] - Start Color\n/// @param {Color} $endColor [#999999] - End Color\n@mixin background-gradient($startColor: #3c3c3c, $endColor: #999999) {\n  background-color: $startColor;\n  background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));\n  background-image: -webkit-linear-gradient(top, $startColor, $endColor);\n  background-image: -moz-linear-gradient(top, $startColor, $endColor);\n  background-image: -ms-linear-gradient(top, $startColor, $endColor);\n  background-image: -o-linear-gradient(top, $startColor, $endColor);\n  background-image: linear-gradient(top, $startColor, $endColor);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}',\n  endColorStr='#{$endColor}');\n}\n\n/// Background Horizontal\n/// @param {Color} $startColor [#3C3C3C] - Start Color\n/// @param {Color} $endColor [#999999] - End Color\n@mixin background-horizontal($startColor: #3c3c3c, $endColor: #999999) {\n  background-color: $startColor;\n  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));\n  background-image: -webkit-linear-gradient(left, $startColor, $endColor);\n  background-image: -moz-linear-gradient(left, $startColor, $endColor);\n  background-image: -ms-linear-gradient(left, $startColor, $endColor);\n  background-image: -o-linear-gradient(left, $startColor, $endColor);\n  background-image: linear-gradient(left, $startColor, $endColor);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}',\n  endColorStr='#{$endColor}',\n  gradientType='1');\n}\n\n/// Background Radial\n/// @param {Color} $startColor [#3C3C3C] - Start Color\n/// @param {Percentage} $startPos [0%] - Start position\n/// @param {Color} $endColor [#999999] - End Color\n/// @param {Percentage} $endPos [100%] - End position\n@mixin background-radial($startColor: #ffffff, $startPos: 0%, $endColor: #000000, $endPos: 100%) {\n  background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos, $startColor), color-stop($endPos, $endColor));\n  background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: -o-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos);\n}\n\n/// Background Size\n/// @param {Size} $width [100%] - Width\n/// @param {Size} $width [$width] - Height\n/// @require {mixin} css3-prefix\n@mixin background-size($width: 100%, $height: $width) {\n  @if type-of($width) == \"number\" and $height !=null {\n    @include css3-prefix(\"background-size\", $width $height);\n  } @else {\n    @include css3-prefix(\"background-size\", $width);\n  }\n}\n\n/// Background Color Opacity\n/// @param {Color} $color [100%] - Color\n/// @param {Double} $opacity [0.85] - Opacity\n@mixin background-opacity($color: #000, $opacity: 0.85) {\n  background: $color;\n  background: rgba($color, $opacity);\n}\n\n/// Border Radius\n/// @param {Size} $radius [5px] - Radius\n/// @require {mixin} css3-prefix\n@mixin border-radius($radius: 5px) {\n  @include css3-prefix(\"border-radius\", $radius);\n}\n\n/// Border Radius Separate\n/// @param {Size} $topLeftRadius [5px] - Top Left\n/// @param {Size} $topRightRadius [5px] - Top Right\n/// @param {Size} $bottomLeftRadius [5px] - Bottom Left\n/// @param {Size} $bottomRightRadius [5px] - Bottom Right\n@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {\n  -webkit-border-top-left-radius: $topLeftRadius;\n  -webkit-border-top-right-radius: $topRightRadius;\n  -webkit-border-bottom-right-radius: $bottomRightRadius;\n  -webkit-border-bottom-left-radius: $bottomLeftRadius;\n  -moz-border-radius-topleft: $topLeftRadius;\n  -moz-border-radius-topright: $topRightRadius;\n  -moz-border-radius-bottomright: $bottomRightRadius;\n  -moz-border-radius-bottomleft: $bottomLeftRadius;\n  border-top-left-radius: $topLeftRadius;\n  border-top-right-radius: $topRightRadius;\n  border-bottom-right-radius: $bottomRightRadius;\n  border-bottom-left-radius: $bottomLeftRadius;\n}\n\n/// Box\n/// @param {*} $orient [horizontal] - Orientation\n/// @param {*} $pack [center] - Pack\n/// @param {*} $align [center] - Align\n/// @require {mixin} css3-prefix\n@mixin box($orient: horizontal, $pack: center, $align: center) {\n  display: -webkit-box;\n  display: -moz-box;\n  display: box;\n  @include css3-prefix(\"box-orient\", $orient);\n  @include css3-prefix(\"box-pack\", $pack);\n  @include css3-prefix(\"box-align\", $align);\n}\n\n/// Box RGBA\n/// @param {Integer} $r [60] - Red\n/// @param {Integer} $g [3] - Green\n/// @param {Integer} $b [12] - Blue\n/// @param {Double} $opacity [0.23] - Opacity\n/// @param {Color} $color [#3C3C3C] - Color\n@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3c3c3c) {\n  background-color: transparent;\n  background-color: rgba($r, $g, $b, $opacity);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',\n  endColorstr='#{$color}');\n  zoom: 1;\n}\n\n/// Box Shadow\n/// @param {Size} $x [2px] - X\n/// @param {Size} $y [2px] - Y\n/// @param {Size} $blur [5px] - Blur\n/// @param {Color} $color [rgba(0,0,0,.4)] - Color\n/// @param {Boolean} $inset - Inset\n@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4), $inset: \"\") {\n  @if ($inset != \"\") {\n    @include css3-prefix(\"box-shadow\", $inset $x $y $blur $color);\n  } @else {\n    @include css3-prefix(\"box-shadow\", $x $y $blur $color);\n  }\n}\n\n/// Box Sizing\n/// @param {*} $type [border-box] - Type\n/// @require {mixin} css3-prefix\n@mixin box-sizing($type: border-box) {\n  @include css3-prefix(\"box-sizing\", $type);\n}\n\n/// Columns\n/// @param {Integer} $count [3] - Count\n/// @param {Integer} $gap [10] - Gap\n/// @require {mixin} css3-prefix\n@mixin columns($count: 3, $gap: 10) {\n  @include css3-prefix(\"column-count\", $count);\n  @include css3-prefix(\"column-gap\", $gap);\n}\n\n/// Double Borders\n/// @param {Color} $colorOne [#3C3C3C] - Color One\n/// @param {Color} $colorTwo [#999999] - Color Two\n/// @param {Size} $radius [0] - Radius\n/// @require {mixin} css3-prefix\n/// @require {mixin} border-radius\n@mixin double-borders($colorOne: #3c3c3c, $colorTwo: #999999, $radius: 0) {\n  border: 1px solid $colorOne;\n  @include css3-prefix(\"box-shadow\", 0 0 0 1px $colorTwo);\n  @include border-radius($radius);\n}\n\n/// Flex\n/// @param {Integer} $value [1] - Value\n/// @require {mixin} css3-prefix\n@mixin flex($value: 1) {\n  @include css3-prefix(\"box-flex\", $value);\n}\n\n/// Flip\n/// @param {Double} $scaleX [-1] - ScaleX\n/// @require {mixin} css3-prefix\n@mixin flip($scaleX: -1) {\n  @include css3-prefix(\"transform\", scaleX($scaleX));\n  filter: FlipH;\n  -ms-filter: \"FlipH\";\n}\n\n/// Opacity\n/// @param {Double} $opacity [0.5] - Opacity\n/// @require {mixin} css3-prefix\n@mixin opacity($opacity: 0.5) {\n  $opacityMultiplied: ($opacity * 100);\n  filter: alpha(opacity=$opacityMultiplied);\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + $opacityMultiplied + \")\";\n  @include css3-prefix(\"opacity\", $opacity);\n}\n\n/// Outline Radius\n/// @param {Size} $radius [5px] - Radius\n/// @require {mixin} css3-prefix\n@mixin outline-radius($radius: 5px) {\n  @include css3-prefix(\"outline-radius\", $radius);\n}\n\n/// Resize\n/// @param {*} $directoin [both] - Direction\n/// @require {mixin} css3-prefix\n@mixin resize($direction: both) {\n  @include css3-prefix(\"resize\", $direction);\n}\n\n/// Rotate\n///\n/// CSS Matrix Rotation Calculator http://www.boogdesign.com/examples/transforms/matrix-calculator.html\n/// @param {Double} $deg [0] - Degree\n/// @param {Double} $m11 [0] - M11\n/// @param {Double} $m12 [0] - M12\n/// @param {Double} $m21 [0] - M21\n/// @param {Double} $m22 [0] - M22\n/// @require {mixin} css3-prefix\n@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {\n  @include css3-prefix(\"transform\", rotate($deg + deg));\n  filter: progid:DXImageTransform.Microsoft.Matrix(M11=#{$m11},\n  M12=#{$m12},\n  M21=#{$m21},\n  M22=#{$m22},\n  sizingMethod='auto expand');\n  zoom: 1;\n}\n\n/// Text Shadow\n/// @param {Size} $x [2px] - X\n/// @param {Size} $y [2px] - Y\n/// @param {Size} $blur [2px] - Blur\n/// @param {Color} $color [rgba(0,0,0,.4)] - Color\n@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4)) {\n  text-shadow: $x $y $blur $color;\n}\n\n/// Transform\n/// @param {List} $params - Params\n/// @require {mixin} css3-prefix\n@mixin transform($params) {\n  @include css3-prefix(\"transform\", $params);\n}\n\n/// Transform-Origin\n/// @param {List} $params - Params\n/// @require {mixin} css3-prefix\n@mixin transform-origin($params) {\n  @include css3-prefix(\"transform-origin\", $params);\n}\n\n// Transform-Style\n/// @param {List} $params - Params\n/// @require {mixin} css3-prefix\n@mixin transform-style($style: preserve-3d) {\n  @include css3-prefix(\"transform-style\", $style);\n}\n\n/// Transition\n/// @param {List} $properties - Properties\n/// @require {mixin} css3-prefix\n@mixin transition($properties...) {\n  @if length($properties) >=1 {\n    @include css3-prefix(\"transition\", $properties);\n  } @else {\n    @include css3-prefix(\"transition\", \"all 0.2s ease-in-out 0s\");\n  }\n}\n\n/// Triple Borders\n/// @param {Color} $colorOne [#3C3C3C] - Color One\n/// @param {Color} $colorTwo [#999999] - Color Two\n/// @param {Color} $colorThree [#000000] - Color Three\n/// @param {Size} $radius [0] - Radius\n/// @require {mixin} border-radius\n/// @require {mixin} css3-prefix\n@mixin triple-borders($colorOne: #3c3c3c, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {\n  border: 1px solid $colorOne;\n  @include border-radius($radius);\n  @include css3-prefix(\"box-shadow\", \"0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}\");\n}\n\n/// Keyframes\n/// @param {*} $animation-name - Animation name\n/// @content [Animation css]\n@mixin keyframes($animation-name) {\n  @-webkit-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @-moz-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @-ms-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @-o-keyframes #{$animation-name} {\n    @content;\n  }\n\n  @keyframes #{$animation-name} {\n    @content;\n  }\n}\n\n/// Animation\n/// @param {*} $str - name duration timing-function delay iteration-count direction fill-mode play-state ([http://www.w3schools.com/cssref/css3_pr_animation.asp](http://www.w3schools.com/cssref/css3_pr_animation.asp))\n/// @require {mixin} css3-prefix\n@mixin animation($str) {\n  @include css3-prefix(\"animation\", $str);\n}\n\n// --------------------------------------------------\n// Flexbox SASS mixins\n// The spec: http://www.w3.org/TR/css3-flexbox\n// --------------------------------------------------\n// Flexbox display\n@mixin flexbox() {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: -webkit-flex;\n  display: flex;\n}\n\n// The 'flex' shorthand\n// - applies to: flex items\n// <positive-number>, initial, auto, or none\n@mixin flex($values) {\n  -webkit-box-flex: $values;\n  -moz-box-flex: $values;\n  -webkit-flex: $values;\n  -ms-flex: $values;\n  flex: $values;\n}\n\n// Flex Flow Direction\n// - applies to: flex containers\n// row | row-reverse | column | column-reverse\n@mixin flex-direction($direction) {\n  -webkit-flex-direction: $direction;\n  -moz-flex-direction: $direction;\n  -ms-flex-direction: $direction;\n  flex-direction: $direction;\n}\n\n// Flex Line Wrapping\n// - applies to: flex containers\n// nowrap | wrap | wrap-reverse\n@mixin flex-wrap($wrap) {\n  -webkit-flex-wrap: $wrap;\n  -moz-flex-wrap: $wrap;\n  -ms-flex-wrap: $wrap;\n  flex-wrap: $wrap;\n}\n\n// Flex Direction and Wrap\n// - applies to: flex containers\n// <flex-direction> || <flex-wrap>\n@mixin flex-flow($flow) {\n  -webkit-flex-flow: $flow;\n  -moz-flex-flow: $flow;\n  -ms-flex-flow: $flow;\n  flex-flow: $flow;\n}\n\n// Display Order\n// - applies to: flex items\n// <integer>\n@mixin order($val) {\n  -webkit-box-ordinal-group: $val;\n  -moz-box-ordinal-group: $val;\n  -ms-flex-order: $val;\n  -webkit-order: $val;\n  order: $val;\n}\n\n// Flex grow factor\n// - applies to: flex items\n// <number>\n@mixin flex-grow($grow) {\n  -webkit-flex-grow: $grow;\n  -moz-flex-grow: $grow;\n  -ms-flex-grow: $grow;\n  flex-grow: $grow;\n}\n\n// Flex shrink\n// - applies to: flex item shrink factor\n// <number>\n@mixin flex-shrink($shrink) {\n  -webkit-flex-shrink: $shrink;\n  -moz-flex-shrink: $shrink;\n  -ms-flex-shrink: $shrink;\n  flex-shrink: $shrink;\n}\n\n// Flex basis\n// - the initial main size of the flex item\n// - applies to: flex itemsnitial main size of the flex item\n// <width>\n@mixin flex-basis($width) {\n  -webkit-flex-basis: $width;\n  -moz-flex-basis: $width;\n  -ms-flex-basis: $width;\n  flex-basis: $width;\n}\n\n// Axis Alignment\n// - applies to: flex containers\n// flex-start | flex-end | center | space-between | space-around\n@mixin justify-content($justify) {\n  -webkit-justify-content: $justify;\n  -moz-justify-content: $justify;\n  -ms-justify-content: $justify;\n  justify-content: $justify;\n  -ms-flex-pack: $justify;\n}\n\n// Packing Flex Lines\n// - applies to: multi-line flex containers\n// flex-start | flex-end | center | space-between | space-around | stretch\n@mixin align-content($align) {\n  -webkit-align-content: $align;\n  -moz-align-content: $align;\n  -ms-align-content: $align;\n  align-content: $align;\n}\n\n// Cross-axis Alignment\n// - applies to: flex containers\n// flex-start | flex-end | center | baseline | stretch\n@mixin align-items($align) {\n  -webkit-align-items: $align;\n  -moz-align-items: $align;\n  -ms-align-items: $align;\n  align-items: $align;\n}\n\n// Cross-axis Alignment\n// - applies to: flex items\n// auto | flex-start | flex-end | center | baseline | stretch\n@mixin align-self($align) {\n  -webkit-align-self: $align;\n  -moz-align-self: $align;\n  -ms-align-self: $align;\n  align-self: $align;\n}\n\n// media queries\n@mixin respond-to($media) {\n  @if $media==large {\n    // 1200\n    @media only screen and (max-width: $screen-md-max) {\n      @content;\n    }\n  } @else if $media==medium {\n    // 991\n    @media only screen and (max-width: $screen-sm-max) {\n      @content;\n    }\n  } @else if $media==small {\n    // 768\n    @media only screen and (max-width: $screen-xs-max) {\n      @content;\n    }\n  } @else if $media==mobile {\n    // 480\n    @media only screen and (max-width: $screen-mb-max) {\n      @content;\n    }\n  }\n}\n"
	],
	"names": [],
	"mappings": ""
}